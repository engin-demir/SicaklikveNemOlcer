CCS PCM C Compiler, Version 5.007, 61971               13-Ara-16 20:53

               Filename:   C:\Users\EngiN\Desktop\DHT11\main.lst

               ROM used:   671 words (8%)
                           Largest free fragment is 2048
               RAM used:   17 (5%) at main() level
                           26 (7%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   21E
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA 20,27
000D:  DATA C5,26
000E:  DATA 20,10
000F:  DATA 52,24
0010:  DATA 20,1D
0011:  DATA 25,32
0012:  DATA AE,12
0013:  DATA 64,10
0014:  DATA A5,12
0015:  DATA 20,05
0016:  DATA 0D,10
0017:  DATA 00,00
0018:  DATA A0,29
0019:  DATA E9,31
001A:  DATA E1,35
001B:  DATA EC,34
001C:  DATA 6B,10
001D:  DATA 20,1D
001E:  DATA 25,32
001F:  DATA AE,12
0020:  DATA 64,10
0021:  DATA A5,31
0022:  DATA 43,10
0023:  DATA 8A,06
0024:  DATA 20,10
0025:  DATA 00,00
*
0158:  MOVF   0B,W
0159:  MOVWF  2D
015A:  BCF    0B.7
015B:  BSF    03.5
015C:  BSF    03.6
015D:  BSF    0C.7
015E:  BSF    0C.0
015F:  NOP
0160:  NOP
0161:  BTFSC  03.0
0162:  GOTO   18B
0163:  BCF    03.5
0164:  MOVF   0C,W
0165:  ANDLW  7F
0166:  BCF    03.6
0167:  MOVWF  2E
0168:  BSF    03.6
0169:  MOVF   0D,W
016A:  BCF    03.6
016B:  MOVWF  2F
016C:  BSF    03.6
016D:  MOVF   0F,W
016E:  BCF    03.6
016F:  MOVWF  30
0170:  MOVF   2E,W
0171:  BTFSS  0C.4
0172:  GOTO   171
0173:  MOVWF  19
0174:  MOVF   2F,W
0175:  BSF    03.6
0176:  MOVWF  0D
0177:  BCF    03.6
0178:  MOVF   30,W
0179:  BSF    03.6
017A:  MOVWF  0F
017B:  BSF    03.5
017C:  BSF    0C.7
017D:  BSF    0C.0
017E:  NOP
017F:  NOP
0180:  BCF    03.5
0181:  BCF    03.6
0182:  DECFSZ 2C,F
0183:  GOTO   185
0184:  GOTO   188
0185:  BSF    03.5
0186:  BSF    03.6
0187:  GOTO   18B
0188:  GOTO   1AB
0189:  BSF    03.5
018A:  BSF    03.6
018B:  BCF    03.5
018C:  RLF    0C,W
018D:  RLF    0E,W
018E:  ANDLW  7F
018F:  BCF    03.6
0190:  MOVWF  2E
0191:  BSF    03.6
0192:  MOVF   0D,W
0193:  BCF    03.6
0194:  MOVWF  2F
0195:  BSF    03.6
0196:  MOVF   0F,W
0197:  BCF    03.6
0198:  MOVWF  30
0199:  MOVF   2E,W
019A:  BTFSS  0C.4
019B:  GOTO   19A
019C:  MOVWF  19
019D:  MOVF   2F,W
019E:  BSF    03.6
019F:  MOVWF  0D
01A0:  BCF    03.6
01A1:  MOVF   30,W
01A2:  BSF    03.6
01A3:  MOVWF  0F
01A4:  INCF   0D,F
01A5:  BTFSC  03.2
01A6:  INCF   0F,F
01A7:  BCF    03.0
01A8:  BCF    03.6
01A9:  DECFSZ 2C,F
01AA:  GOTO   15B
01AB:  BTFSC  2D.7
01AC:  BSF    0B.7
01AD:  RETURN
01AE:  MOVF   33,W
01AF:  CLRF   78
01B0:  SUBWF  32,W
01B1:  BTFSC  03.0
01B2:  GOTO   1B6
01B3:  MOVF   32,W
01B4:  MOVWF  77
01B5:  GOTO   1C2
01B6:  CLRF   77
01B7:  MOVLW  08
01B8:  MOVWF  34
01B9:  RLF    32,F
01BA:  RLF    77,F
01BB:  MOVF   33,W
01BC:  SUBWF  77,W
01BD:  BTFSC  03.0
01BE:  MOVWF  77
01BF:  RLF    78,F
01C0:  DECFSZ 34,F
01C1:  GOTO   1B9
01C2:  RETURN
01C3:  MOVLW  20
01C4:  BTFSS  2D.4
01C5:  MOVLW  30
01C6:  MOVWF  2E
01C7:  MOVF   2C,W
01C8:  MOVWF  77
01C9:  BTFSS  2C.7
01CA:  GOTO   1D3
01CB:  COMF   77,F
01CC:  INCF   77,F
01CD:  MOVF   77,W
01CE:  MOVWF  2C
01CF:  MOVLW  2D
01D0:  MOVWF  2E
01D1:  BSF    2D.7
01D2:  BSF    2D.0
01D3:  MOVF   2C,W
01D4:  MOVWF  32
01D5:  MOVLW  64
01D6:  MOVWF  33
01D7:  CALL   1AE
01D8:  MOVF   77,W
01D9:  MOVWF  2C
01DA:  MOVLW  30
01DB:  ADDWF  78,W
01DC:  MOVWF  2F
01DD:  MOVF   2C,W
01DE:  MOVWF  32
01DF:  MOVLW  0A
01E0:  MOVWF  33
01E1:  CALL   1AE
01E2:  MOVLW  30
01E3:  ADDWF  77,W
01E4:  MOVWF  31
01E5:  MOVLW  30
01E6:  ADDWF  78,W
01E7:  MOVWF  30
01E8:  MOVF   2E,W
01E9:  MOVWF  77
01EA:  MOVLW  30
01EB:  SUBWF  2F,W
01EC:  BTFSC  03.2
01ED:  GOTO   1F2
01EE:  BSF    2D.1
01EF:  BTFSC  2D.7
01F0:  BSF    2D.2
01F1:  GOTO   206
01F2:  MOVF   2E,W
01F3:  MOVWF  2F
01F4:  MOVLW  20
01F5:  MOVWF  2E
01F6:  MOVLW  30
01F7:  SUBWF  30,W
01F8:  BTFSC  03.2
01F9:  GOTO   1FE
01FA:  BSF    2D.0
01FB:  BTFSC  2D.7
01FC:  BSF    2D.1
01FD:  GOTO   206
01FE:  BTFSS  03.2
01FF:  BSF    2D.0
0200:  BTFSS  03.2
0201:  GOTO   206
0202:  MOVF   2F,W
0203:  MOVWF  30
0204:  MOVLW  20
0205:  MOVWF  2F
0206:  BTFSC  2D.2
0207:  GOTO   20D
0208:  BTFSC  2D.1
0209:  GOTO   211
020A:  BTFSC  2D.0
020B:  GOTO   215
020C:  GOTO   219
020D:  MOVF   2E,W
020E:  BTFSS  0C.4
020F:  GOTO   20E
0210:  MOVWF  19
0211:  MOVF   2F,W
0212:  BTFSS  0C.4
0213:  GOTO   212
0214:  MOVWF  19
0215:  MOVF   30,W
0216:  BTFSS  0C.4
0217:  GOTO   216
0218:  MOVWF  19
0219:  MOVF   31,W
021A:  BTFSS  0C.4
021B:  GOTO   21A
021C:  MOVWF  19
021D:  RETURN
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4000000) 
*
0026:  MOVLW  30
0027:  MOVWF  04
0028:  BCF    03.7
0029:  MOVF   00,W
002A:  BTFSC  03.2
002B:  GOTO   03A
002C:  MOVLW  01
002D:  MOVWF  78
002E:  CLRF   77
002F:  DECFSZ 77,F
0030:  GOTO   02F
0031:  DECFSZ 78,F
0032:  GOTO   02E
0033:  MOVLW  4A
0034:  MOVWF  77
0035:  DECFSZ 77,F
0036:  GOTO   035
0037:  GOTO   038
0038:  DECFSZ 00,F
0039:  GOTO   02C
003A:  RETURN
....................  
....................  
.................... #define use_portb_lcd TRUE   // LCD B portuna baðlý 
.................... #define dht11 PIN_C3 
.................... #include <lcd.c>   // lcd.c dosyasý tanýtýlýyor 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0080:  MOVLW  0F
0081:  BSF    03.5
0082:  ANDWF  06,W
0083:  IORLW  F0
0084:  MOVWF  06
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0085:  BCF    03.5
0086:  BSF    06.2
....................    delay_cycles(1); 
0087:  NOP
....................    lcd_output_enable(1); 
0088:  BSF    06.0
....................    delay_cycles(1); 
0089:  NOP
....................    high = lcd_read_nibble(); 
008A:  CALL   047
008B:  MOVF   78,W
008C:  MOVWF  31
....................        
....................    lcd_output_enable(0); 
008D:  BCF    06.0
....................    delay_cycles(1); 
008E:  NOP
....................    lcd_output_enable(1); 
008F:  BSF    06.0
....................    delay_us(1); 
0090:  NOP
....................    low = lcd_read_nibble(); 
0091:  CALL   047
0092:  MOVF   78,W
0093:  MOVWF  30
....................        
....................    lcd_output_enable(0); 
0094:  BCF    06.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0095:  MOVLW  0F
0096:  BSF    03.5
0097:  ANDWF  06,W
0098:  MOVWF  06
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
0099:  BCF    03.5
009A:  SWAPF  31,W
009B:  MOVWF  77
009C:  MOVLW  F0
009D:  ANDWF  77,F
009E:  MOVF   77,W
009F:  IORWF  30,W
00A0:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
0047:  MOVF   06,W
0048:  MOVWF  77
0049:  SWAPF  06,W
004A:  ANDLW  0F
004B:  MOVWF  78
....................   #endif 
004C:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
003B:  SWAPF  31,W
003C:  ANDLW  F0
003D:  MOVWF  77
003E:  MOVLW  0F
003F:  ANDWF  06,W
0040:  IORWF  77,W
0041:  MOVWF  06
....................   #endif 
....................        
....................    delay_cycles(1); 
0042:  NOP
....................    lcd_output_enable(1); 
0043:  BSF    06.0
....................    delay_us(2); 
0044:  GOTO   045
....................    lcd_output_enable(0); 
0045:  BCF    06.0
0046:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
007A:  BSF    03.5
007B:  BCF    06.0
....................    lcd_rs_tris(); 
007C:  BCF    06.1
....................    lcd_rw_tris(); 
007D:  BCF    06.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
007E:  BCF    03.5
007F:  BCF    06.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00A1:  MOVF   78,W
00A2:  MOVWF  30
00A3:  BTFSC  30.7
00A4:  GOTO   080
....................    lcd_output_rs(address); 
00A5:  BTFSS  2E.0
00A6:  BCF    06.1
00A7:  BTFSC  2E.0
00A8:  BSF    06.1
....................    delay_cycles(1); 
00A9:  NOP
....................    lcd_output_rw(0); 
00AA:  BCF    06.2
....................    delay_cycles(1); 
00AB:  NOP
....................    lcd_output_enable(0); 
00AC:  BCF    06.0
....................    lcd_send_nibble(n >> 4); 
00AD:  SWAPF  2F,W
00AE:  MOVWF  30
00AF:  MOVLW  0F
00B0:  ANDWF  30,F
00B1:  MOVF   30,W
00B2:  MOVWF  31
00B3:  CALL   03B
....................    lcd_send_nibble(n & 0xf); 
00B4:  MOVF   2F,W
00B5:  ANDLW  0F
00B6:  MOVWF  30
00B7:  MOVWF  31
00B8:  CALL   03B
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
*
004D:  MOVLW  0F
004E:  BSF    03.5
004F:  ANDWF  06,W
0050:  MOVWF  06
....................   #endif 
....................    lcd_enable_tris(); 
0051:  BCF    06.0
....................    lcd_rs_tris(); 
0052:  BCF    06.1
....................    lcd_rw_tris(); 
0053:  BCF    06.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0054:  BCF    03.5
0055:  BCF    06.1
....................    lcd_output_rw(0); 
0056:  BCF    06.2
....................    lcd_output_enable(0); 
0057:  BCF    06.0
....................      
....................    delay_ms(15); 
0058:  MOVLW  0F
0059:  MOVWF  30
005A:  CALL   026
....................    for(i=1;i<=3;++i) 
005B:  MOVLW  01
005C:  MOVWF  2C
005D:  MOVF   2C,W
005E:  SUBLW  03
005F:  BTFSS  03.0
0060:  GOTO   069
....................    { 
....................        lcd_send_nibble(3); 
0061:  MOVLW  03
0062:  MOVWF  31
0063:  CALL   03B
....................        delay_ms(5); 
0064:  MOVLW  05
0065:  MOVWF  30
0066:  CALL   026
0067:  INCF   2C,F
0068:  GOTO   05D
....................    } 
....................     
....................    lcd_send_nibble(2); 
0069:  MOVLW  02
006A:  MOVWF  31
006B:  CALL   03B
....................    delay_ms(5); 
006C:  MOVLW  05
006D:  MOVWF  30
006E:  CALL   026
....................    for(i=0;i<=3;++i) 
006F:  CLRF   2C
0070:  MOVF   2C,W
0071:  SUBLW  03
0072:  BTFSS  03.0
0073:  GOTO   0BB
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
0074:  MOVF   2C,W
0075:  CALL   004
0076:  MOVWF  2D
0077:  CLRF   2E
0078:  MOVF   2D,W
0079:  MOVWF  2F
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
*
00B9:  INCF   2C,F
00BA:  GOTO   070
00BB:  BCF    0A.3
00BC:  BCF    0A.4
00BD:  GOTO   247 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
....................       address=LCD_LINE_TWO; 
....................    else 
....................       address=0; 
....................       
....................    address+=x-1; 
....................    lcd_send_byte(0,0x80|address); 
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
....................                      delay_ms(2); 
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
....................      #endif 
....................    } 
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
.................... #include <DHT11.c> 
.................... #ifndef dht11 
....................    #define dht11 PIN_C3 
.................... #endif 
....................  
.................... char dht_dat[10]; // Output data will be here 
....................  
.................... void dht_init() 
....................  
.................... { 
....................     delay_ms (1); 
00BE:  MOVLW  01
00BF:  MOVWF  30
00C0:  CALL   026
....................     OUTPUT_HIGH (dht11); 
00C1:  BCF    2A.3
00C2:  MOVF   2A,W
00C3:  BSF    03.5
00C4:  MOVWF  07
00C5:  BCF    03.5
00C6:  BSF    07.3
00C7:  RETURN
.................... } 
.................... byte leer_dht_dat() 
*
0113:  CLRF   32
0114:  CLRF   33
....................  
.................... { 
....................     byte i = 0; 
....................     byte result = 0; 
....................  
....................     for (i = 0; i < 8; i++) 
0115:  CLRF   32
0116:  MOVF   32,W
0117:  SUBLW  07
0118:  BTFSS  03.0
0119:  GOTO   144
....................     { 
....................         while (input (dht11) == 0) 
011A:  BSF    2A.3
011B:  MOVF   2A,W
011C:  BSF    03.5
011D:  MOVWF  07
011E:  BCF    03.5
011F:  BTFSS  07.3
0120:  GOTO   11A
....................             ; 
....................  
....................         delay_us (30); 
0121:  MOVLW  09
0122:  MOVWF  77
0123:  DECFSZ 77,F
0124:  GOTO   123
0125:  GOTO   126
....................  
....................         if (input (dht11) == 1) 
0126:  BSF    2A.3
0127:  MOVF   2A,W
0128:  BSF    03.5
0129:  MOVWF  07
012A:  BCF    03.5
012B:  BTFSS  07.3
012C:  GOTO   13B
....................         { 
....................             result |= (1 << (7 - i) ); 
012D:  MOVF   32,W
012E:  SUBLW  07
012F:  MOVWF  78
0130:  MOVLW  01
0131:  MOVWF  77
0132:  MOVF   78,F
0133:  BTFSC  03.2
0134:  GOTO   139
0135:  BCF    03.0
0136:  RLF    77,F
0137:  DECFSZ 78,F
0138:  GOTO   135
0139:  MOVF   77,W
013A:  IORWF  33,F
....................         } 
....................  
....................         while (input (dht11) == 1) 
013B:  BSF    2A.3
013C:  MOVF   2A,W
013D:  BSF    03.5
013E:  MOVWF  07
013F:  BCF    03.5
0140:  BTFSC  07.3
0141:  GOTO   13B
....................             ; 
0142:  INCF   32,F
0143:  GOTO   116
....................     } 
....................  
....................     return result; 
0144:  MOVF   33,W
0145:  MOVWF  78
.................... } 
....................  
.................... void read_dht() 
*
00C8:  CLRF   2C
....................  
.................... { 
....................     byte GlobalErr = 0; 
....................     byte dht_in; 
....................     byte i; 
....................     byte dht_check_sum; 
....................     dht_init(); 
00C9:  CALL   0BE
....................     OUTPUT_LOW (dht11); 
00CA:  BCF    2A.3
00CB:  MOVF   2A,W
00CC:  BSF    03.5
00CD:  MOVWF  07
00CE:  BCF    03.5
00CF:  BCF    07.3
....................     delay_ms (18); 
00D0:  MOVLW  12
00D1:  MOVWF  30
00D2:  CALL   026
....................     OUTPUT_HIGH (dht11); 
00D3:  BCF    2A.3
00D4:  MOVF   2A,W
00D5:  BSF    03.5
00D6:  MOVWF  07
00D7:  BCF    03.5
00D8:  BSF    07.3
....................     delay_us (30); 
00D9:  MOVLW  09
00DA:  MOVWF  77
00DB:  DECFSZ 77,F
00DC:  GOTO   0DB
00DD:  GOTO   0DE
....................     dht_in = input (dht11); 
00DE:  BSF    2A.3
00DF:  MOVF   2A,W
00E0:  BSF    03.5
00E1:  MOVWF  07
00E2:  BCF    03.5
00E3:  CLRF   2D
00E4:  BTFSC  07.3
00E5:  INCF   2D,F
....................  
....................     if (dht_in) 
00E6:  MOVF   2D,F
00E7:  BTFSC  03.2
00E8:  GOTO   0EC
....................     { 
....................         GlobalErr = 1; 
00E9:  MOVLW  01
00EA:  MOVWF  2C
....................         return; 
00EB:  GOTO   155
....................     } 
....................  
....................     delay_us (80); 
00EC:  MOVLW  1A
00ED:  MOVWF  77
00EE:  DECFSZ 77,F
00EF:  GOTO   0EE
00F0:  NOP
....................     dht_in = input (dht11); 
00F1:  BSF    2A.3
00F2:  MOVF   2A,W
00F3:  BSF    03.5
00F4:  MOVWF  07
00F5:  BCF    03.5
00F6:  CLRF   2D
00F7:  BTFSC  07.3
00F8:  INCF   2D,F
....................  
....................     if (!dht_in) 
00F9:  MOVF   2D,F
00FA:  BTFSS  03.2
00FB:  GOTO   0FF
....................     { 
....................         GlobalErr = 2; 
00FC:  MOVLW  02
00FD:  MOVWF  2C
....................         return; 
00FE:  GOTO   155
....................     } 
....................  
....................     delay_us (80); 
00FF:  MOVLW  1A
0100:  MOVWF  77
0101:  DECFSZ 77,F
0102:  GOTO   101
0103:  NOP
....................  
....................     for (i = 0; i < 4; i++) 
0104:  CLRF   2E
0105:  MOVF   2E,W
0106:  SUBLW  03
0107:  BTFSS  03.0
0108:  GOTO   14F
....................     { 
....................         dht_dat[i] = leer_dht_dat(); 
0109:  MOVLW  20
010A:  ADDWF  2E,W
010B:  MOVWF  78
010C:  CLRF   7A
010D:  BTFSC  03.0
010E:  INCF   7A,F
010F:  MOVF   78,W
0110:  MOVWF  30
0111:  MOVF   7A,W
0112:  MOVWF  31
*
0146:  MOVF   30,W
0147:  MOVWF  04
0148:  BCF    03.7
0149:  BTFSC  31.0
014A:  BSF    03.7
014B:  MOVF   78,W
014C:  MOVWF  00
014D:  INCF   2E,F
014E:  GOTO   105
....................     } 
....................  
....................     OUTPUT_HIGH (dht11); 
014F:  BCF    2A.3
0150:  MOVF   2A,W
0151:  BSF    03.5
0152:  MOVWF  07
0153:  BCF    03.5
0154:  BSF    07.3
0155:  BCF    0A.3
0156:  BCF    0A.4
0157:  GOTO   249 (RETURN)
.................... } 
....................  
....................  
.................... #use rs232 (baud=9600, xmit=pin_C6, rcv=pin_C7, parity=N, stop=1)  
.................... int k=123; 
.................... void main() 
*
021E:  MOVLW  FF
021F:  MOVWF  2A
0220:  MOVLW  19
0221:  BSF    03.5
0222:  MOVWF  19
0223:  MOVLW  A6
0224:  MOVWF  18
0225:  MOVLW  90
0226:  BCF    03.5
0227:  MOVWF  18
0228:  MOVLW  7B
0229:  MOVWF  2B
022A:  BSF    03.5
022B:  BSF    1F.0
022C:  BSF    1F.1
022D:  BSF    1F.2
022E:  BCF    1F.3
022F:  MOVLW  07
0230:  MOVWF  1C
0231:  BCF    03.7
0232:  MOVLW  1F
0233:  ANDWF  03,F
.................... { 
....................    setup_psp(PSP_DISABLED);        // PSP birimi devre dýþý 
0234:  BCF    09.4
....................    setup_timer_1(T1_DISABLED);     // T1 zamanlayýcýsý devre dýþý 
0235:  BCF    03.5
0236:  CLRF   10
....................    setup_timer_2(T2_DISABLED,0,1); // T2 zamanlayýcýsý devre dýþý 
0237:  MOVLW  00
0238:  MOVWF  78
0239:  MOVWF  12
023A:  MOVLW  00
023B:  BSF    03.5
023C:  MOVWF  12
....................    setup_adc_ports(NO_ANALOGS);    // ANALOG giriþ yok 
023D:  BSF    1F.0
023E:  BSF    1F.1
023F:  BSF    1F.2
0240:  BCF    1F.3
....................    setup_adc(ADC_OFF);             // ADC birimi devre dýþý 
0241:  BCF    03.5
0242:  BCF    1F.0
....................    setup_CCP1(CCP_OFF);            // CCP1 birimi devre dýþý 
0243:  MOVLW  F0
0244:  ANDWF  17,F
....................    setup_CCP2(CCP_OFF);            // CCP2 birimi devre dýþý 
0245:  ANDWF  1D,F
....................    lcd_init(); 
0246:  GOTO   04D
....................    dht_init(); 
0247:  CALL   0BE
....................  
....................    while(TRUE) 
....................    { 
....................     
....................        
....................          read_dht(); 
0248:  GOTO   0C8
....................           
....................          printf(" NEM  RH :%d.%d %% \n\r ",dht_dat[0],dht_dat[1]); 
0249:  MOVLW  0C
024A:  BSF    03.6
024B:  MOVWF  0D
024C:  MOVLW  00
024D:  MOVWF  0F
024E:  BCF    03.0
024F:  MOVLW  0A
0250:  BCF    03.6
0251:  MOVWF  2C
0252:  CALL   158
0253:  MOVF   20,W
0254:  MOVWF  2C
0255:  MOVLW  18
0256:  MOVWF  2D
0257:  CALL   1C3
0258:  MOVLW  2E
0259:  BTFSS  0C.4
025A:  GOTO   259
025B:  MOVWF  19
025C:  MOVF   21,W
025D:  MOVWF  2C
025E:  MOVLW  18
025F:  MOVWF  2D
0260:  CALL   1C3
0261:  MOVLW  20
0262:  BTFSS  0C.4
0263:  GOTO   262
0264:  MOVWF  19
0265:  MOVLW  25
0266:  BTFSS  0C.4
0267:  GOTO   266
0268:  MOVWF  19
0269:  MOVLW  15
026A:  BSF    03.6
026B:  MOVWF  0D
026C:  MOVLW  00
026D:  MOVWF  0F
026E:  BCF    03.0
026F:  MOVLW  04
0270:  BCF    03.6
0271:  MOVWF  2C
0272:  CALL   158
....................          
....................          printf(" Sicaklik  :%d.%d %cC \n\r  ",dht_dat[2],dht_dat[3],223); 
0273:  MOVLW  18
0274:  BSF    03.6
0275:  MOVWF  0D
0276:  MOVLW  00
0277:  MOVWF  0F
0278:  BCF    03.0
0279:  MOVLW  0C
027A:  BCF    03.6
027B:  MOVWF  2C
027C:  CALL   158
027D:  MOVF   22,W
027E:  MOVWF  2C
027F:  MOVLW  18
0280:  MOVWF  2D
0281:  CALL   1C3
0282:  MOVLW  2E
0283:  BTFSS  0C.4
0284:  GOTO   283
0285:  MOVWF  19
0286:  MOVF   23,W
0287:  MOVWF  2C
0288:  MOVLW  18
0289:  MOVWF  2D
028A:  CALL   1C3
028B:  MOVLW  20
028C:  BTFSS  0C.4
028D:  GOTO   28C
028E:  MOVWF  19
028F:  MOVLW  DF
0290:  BTFSS  0C.4
0291:  GOTO   290
0292:  MOVWF  19
0293:  MOVLW  22
0294:  BSF    03.6
0295:  MOVWF  0D
0296:  MOVLW  00
0297:  MOVWF  0F
0298:  BCF    03.0
0299:  MOVLW  06
029A:  BCF    03.6
029B:  MOVWF  2C
029C:  CALL   158
029D:  GOTO   248
....................     
....................    } 
....................     
....................  
.................... } 
....................  
029E:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
